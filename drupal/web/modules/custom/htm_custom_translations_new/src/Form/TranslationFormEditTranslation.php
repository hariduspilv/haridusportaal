<?php

namespace Drupal\htm_custom_translations_new\Form;

use Drupal\Core\Config\Config;
use Drupal\Core\Form\FormStateInterface;

/**
 * Class TranslationFormEditTranslation.
 */
class TranslationFormEditTranslation extends TranslationFormAddTranslation {
	function actionType()
	{
		return 'edit';
	}

	public function buildFormData(array &$form, FormStateInterface $form_state, Config $config, $translation_key)
	{
		parent::buildFormData($form, $form_state, $config, $translation_key);
		$current_conf = $config->get($translation_key);
		#dump($current_conf);
		$form['translation']['key'] += [
			'#default_value' => $translation_key,
			#'#attributes' => ['disabled' => 'disabled']
		];

		$form['translation']['translation_type'] += [
			'#default_value' => $current_conf['translation_type'],
			'#attributes' => ['disabled' => 'disabled']
		];

		//override translations value & type
		foreach ($this->languageManager->getLanguages() as $lang_key => $language){
			$form['translation']['translations'][$lang_key] = [
				'#default_value' => (is_array($current_conf[$lang_key])) ? $current_conf[$lang_key]['value'] : $current_conf[$lang_key],
				'#type' => $current_conf['translation_type'],
				'#title' => $this->t('Translation in ' . $language->getName()),
			];
		}
	}

	public function validateForm(array &$form, FormStateInterface $form_state)
	{
		$translationKeyDefaultValue = $form['translation']['key']['#default_value'];
		$translationKeyFormStateValue = $form_state->getValue(['translation','key']);
		if (strcmp($translationKeyDefaultValue, $translationKeyFormStateValue) !== 0) {
			$form_state->set('delete_old_key', TRUE);
		}
		#parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
	}


}
