<?php
/**
 * @file
 * Update hooks for the admin parts
 */

/**
 * Copy field values to another field
 */

use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;

function htm_custom_admin_update_9100() {
  $query = \Drupal::entityQuery('node');
  $query->condition('type', 'event');
  $results = $query->execute();
  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($results);
  if (!empty($nodes)) {
    foreach ($nodes as $node) {
      $start_time_old = $node->get('field_event_main_start_time')->value;
      if (!empty($start_time_old)) {
        $node->set('field_event_start_time_main',$start_time_old);
      }
      $end_time_old = $node->get('field_event_main_end_time')->value;
      if (!empty($end_time_old)) {
        $node->set('field_event_end_time_main',$end_time_old);
      }
      $additional_dates = $node->get('field_event_date')->referencedEntities();
      if (!empty($additional_dates)) {
        foreach ($additional_dates as $additional_date) {
          $add_start_old = $additional_date->get('field_event_start_time')->value;
          if (!empty($add_start_old)) {
            $additional_date->set('field_event_start_time_addition',$add_start_old);
          }
          $add_end_old = $additional_date->get('field_event_end_time')->value;
          if (!empty($add_end_old)) {
            $additional_date->set('field_event_end_time_addition',$add_end_old);
          }
          $additional_date->save();
        }
      }
      $node->save();
    }
  }
}
/**
 * Copy Noorteseire to tabbed content
 */
function htm_custom_admin_update_9102() {
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'youth_monitoring_page');
  $results = $query->execute();
  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($results);
  if (!empty($nodes)) {
    foreach ($nodes as $node) {
      $tabs = [];

      $new_node = Node::create(['type' => 'youth_monitoring_page_tabbed']);
      $new_node->set('title', $node->get('title')->value);
      $new_node->set('field_introduction', $node->get('field_introduction')->value);
      $video = $node->get('field_first_video')->getValue();
      if (!empty($video)) {
        $new_node->set('field_first_video', $video);
      }
      $picture = $node->get('field_first_picture')->getValue();
      if (!empty($picture)) {
        $new_node->set('field_first_picture', $picture);
      }
      $pic_or_vid = $node->get('field_first_picture_or_video')->value;
      if (!empty($pic_or_vid)) {
        $new_node->set('field_first_picture_or_video', $pic_or_vid);
      }

      $tab = Paragraph::create([
        'type' => 'youth_monitor_tab',
      ]);
      $tab->set('field_youth_monitor_tab_page',$node);
      $tab->save();
      $ext_links = $node->get('field_extertnal_link')->getValue();
      if (!empty($ext_links)) {
        $new_node->set('field_extertnal_link', $ext_links);
      }
      $new_node->set('field_youth_monitor_tab',$tab);
      $new_node->set('uid',$node->get('uid')->value);
      $new_node->enforceIsNew();
      $new_node->save();
    }
  }

}
/**
 * Copy Noorteseire to tabbed content
 */
function htm_custom_admin_update_9103() {
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'youth_monitoring_page_tabbed');
  $results = $query->execute();
  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($results);
  if (!empty($nodes)) {
    foreach ($nodes as $node) {
      if ($node->hasField('field_youth_monitor_tab')){
        $tabs = $node->get('field_youth_monitor_tab')->referencedEntities();
        foreach ($tabs as $tab) {
          if ($tab->hasField('field_youth_monitor_tab_page') and $tab->hasField('field_youth_monitor_tab_ref')){
            $youth_page_id = $tab->get('field_youth_monitor_tab_page')->target_id;
            if (!empty($youth_page_id)) {
              $tab->set('field_youth_monitor_tab_page', null);
              $tab->set('field_youth_monitor_tab_ref', $youth_page_id);
              $tab->save();
            }
          }
        }
      }
    }
  }
}
/**
 * Delete disabled menu links and hide content
 */
function htm_custom_admin_update_9104() {
  // Get the MenuLinkTree service.
  $menu_tree_service = \Drupal::service('menu.link_tree');

  // Load the main menu links.
  $menu_tree = $menu_tree_service->load('main', new MenuTreeParameters());

  // Transform the tree to an array of menu links.
  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];
  $menu_links = $menu_tree_service->transform($menu_tree, $manipulators);

  // Delete disabled menu links and unpublish their internal content.
  htm_custom_admin_get_disabled_links($menu_links);
}
/**
 * Recursively deletes disabled menu links and unpublishes their internal content.
 *
 * @param array $menu_links
 *   An array of menu links.
 */
function htm_custom_admin_get_disabled_links(array $menu_links) {
  foreach ($menu_links as $menu_link) {
    if (!$menu_link->link->isEnabled()) {
      $url = $menu_link->link->getUrlObject();
      // Check if the link is internal.
      if (!$url->isExternal()) {
        if ($url->isRouted()) {
          // Unpublish the internal
          // Unpublish the internal content associated with the disabled menu link.
          $route_parameters = $url->getRouteParameters();
          if (isset($route_parameters['node'])) {
            $node = Node::load($route_parameters['node']);
            if ($node) {
              $node->setUnpublished();
              $node->save();
            }
          }

          // Delete the disabled menu link.
          if ($menu_link->link->isDeletable()) {
            $menu_link->link->deleteLink();
          }
        }
      }

      // Process the subtree.
      htm_custom_admin_get_disabled_links($menu_link->subtree);
    } else {
      // Process the subtree for enabled menu links.
      htm_custom_admin_get_disabled_links($menu_link->subtree);
    }
  }
}
